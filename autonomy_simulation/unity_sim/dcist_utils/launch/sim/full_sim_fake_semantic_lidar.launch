<?xml version="1.0" encoding="UTF-8"?>
<launch>


  <arg name="takeoff_node_start_delay" default="10.0" />  
  <arg name="robot" default="quadrotor" />  
  <arg name="use_lauras" default="false" />
  <arg name="run_graph_slam" default="false" />
  <arg name="launch_unity" default="true" />
  <arg name="coverage_planner" default="false" />
  <arg name="save_range_images" default="false" />


  <!-- If use onboard sensing, set it to be true and set odom to be ukf_odom /> -->
  <arg name="onboard_sensing" default="false"/>
  <arg name="odom" value="/unity_command/ground_truth/$(arg robot)/odom" unless="$(arg onboard_sensing)"/>
  <arg name="odom" value="ukf_odom" if="$(arg onboard_sensing)"/>


  <!-- Choose the environment -->
  <!-- <arg name="param_file" value="$(find arl_unity_ros)/config/polypixel.yaml"/> -->
  <!-- <arg name="param_file" default="$(find arl_unity_ros)/config/overpasscity.yaml"/> -->
  <!-- <arg name="param_file" default="$(find arl_unity_ros)/config/floodedgrounds.yaml"/> -->
  <!-- <arg name="param_file" default="$(find arl_unity_ros)/config/basic_environment.yaml"/> -->
  <arg name="param_file" default="$(find dcist_utils)/config/forest.yaml"/>

  
  <arg name="x" default="40.0"/>
  <arg name="y" default="40.0"/>
  <arg name="z" default="1.2"/>

  <!-- <arg name="x" default="15.0"/> -->
  <!-- <arg name="y" default="20.0"/> -->
  <!-- <arg name="z" default="-2.0"/> -->
  
  <include file="$(find fake_lidar)/launch/fake_lidar_semantic_cloud.launch">
    <arg name="robot" value="$(arg robot)" />
    <arg name="save_as_images" value="$(arg save_range_images)" />
    <arg name="save_image_interval" value="5" />
  </include>

  <include file="$(find dcist_utils)/launch/sim/sim_quad_fake_semantic_lidar.launch">
    <arg name="robot" value="$(arg robot)" />  
    <arg name="odom" value="$(arg odom)" />
    <arg name="launch_unity" value="$(arg launch_unity)" />
    <arg name="param_file" value="$(arg param_file)" />
    <arg name="x" value="$(arg x)"/>
    <arg name="y" value="$(arg y)"/>
    <arg name="z" value="$(arg z)"/>
  </include>


  <group ns="$(arg robot)" if="$(arg use_lauras)">
      <node pkg="motion_primitives"
        type="planning_server.py"
        name="local_plan_server"
        output="screen">
        <rosparam file="$(find control_launch)/config/tracker_params_mp.yaml"/>
        <remap from="voxel_map" to="mapper/local_voxel_map"/>
      </node>
  </group>

  <include file="$(find state_machine_launch)/launch/system_mp.launch">
    <arg name="onboard_sensing" value="$(arg onboard_sensing)" />
    <arg name="lidar_frame" default="DepthCamera1"/>
    <arg name="robot" value="$(arg robot)" />
    <arg name="takeoff_height" value="4" />
    <arg name="use_lauras" value="$(arg use_lauras)" />
    <arg name="lidar_cloud_topic" value="fake_lidar/cloud" />
  </include>

  <include file="$(find client_launch)/launch/client.launch">
    <arg name="robot" value="$(arg robot)" />
  </include>



  <group if="$(arg run_graph_slam)">
    <!-- factor graph slam -->
    <include file="$(find graphslam)/launch/run_for_unity.launch">
    </include>
    <!-- fake ground-truth sloam node -->
    <node pkg="fake_sloam" type="fake_sloam_node.py" name="fake_sloam" output="screen">
    </node>
  </group>

  <group if="$(arg coverage_planner)">
    <!-- coverage planner node -->
    <include file="$(find polygon_coverage_ros)/launch/coverage_planner.launch">
    </include>
  </group>

  
  <node name="robot" pkg="arl_unity_ros_air" type="rosflight_offboard.py" ns="$(arg robot)" output="screen" launch-prefix="bash -c 'sleep $(arg takeoff_node_start_delay); $0 $@' " />
  
</launch>
