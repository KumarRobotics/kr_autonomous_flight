#!/usr/bin/env python
PACKAGE = "flea3"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# fps/frame_rate provides control over the frame rate of the camera.
gen.add("fps", double_t, 0,
        "Frames per second",
        7.5, 1, 240)

# max freerun fps is the max rate the camera can sustain, see ptgrey docs
gen.add("max_free_fps", double_t, 0,"max freerun fps",  200, 200, 200)

# Video Mode controls setting of standard video mode or format 7 video mode
video_mode_enum = gen.enum([gen.const("rgb_640x480", int_t, 4, ""),
                            gen.const("y8_640x480", int_t, 5, ""),
                            gen.const("rgb_800x600", int_t, 8, ""),
                            gen.const("y8_800x600", int_t, 9, ""),
                            gen.const("rgb_1024x768", int_t, 12, ""),
                            gen.const("y8_1024x768", int_t, 13, ""),
                            gen.const("rgb_1280x960", int_t, 16, ""),
                            gen.const("y8_1280x960", int_t, 17, ""),
                            gen.const("rgb_1600x1200", int_t, 20, ""),
                            gen.const("y8_1600x1200", int_t, 21, ""),
                            gen.const("format7", int_t, 23, "")],
                           "An enum to set video mode")
gen.add("video_mode", int_t, 0,
        "Video mode for camera",
        23, 4, 23, edit_method=video_mode_enum)
gen.add("format7_mode", int_t, 0,
        "Camera modes for format 7",
        0, 0, 8)

# ROI controls region of intreset in format 7 mode. Assumes centered ROI
# Set to 0 to reset ROI
gen.add("width", int_t, 0,
        "ROI width",
        0, 0, 4096)
gen.add("height", int_t, 0,
        "ROI height",
        0, 0, 4096)

# Pixel format for format 7 mode
pixel_format_enum = gen.enum([gen.const("unspecified", int_t, 0, "unspecified"),
                              gen.const("mono8", int_t, 31, "mono8"),
                              gen.const("rgb8", int_t, 27, "rgb8"),
                              gen.const("mono16", int_t, 26, "mono16"),
                              gen.const("raw8", int_t, 22, "raw8"),
                              gen.const("raw16", int_t, 21, "raw16")],
                             "An enum to set pixel format")
gen.add("pixel_format", int_t, 0,
        "Pixel format for format 7",
        0, 0, 31, edit_method=pixel_format_enum)

gen.add("raw_bayer_output", bool_t, 0,
        "Enable raw bayer output in standard video mode Y8 and Y16",
        False)

# Trigger control
trigger_source_enum = gen.enum([gen.const("ts_off", int_t, -1, "off"),
                                gen.const("ts_gpio_0", int_t, 0, "GPIO0"),
                                gen.const("ts_gpio_2", int_t, 2, "GPIO2"),
                                gen.const("ts_gpio_3", int_t, 3, "GPIO3"),
                                gen.const("ts_sw", int_t, 7, "software")],
                               "Defines valid trigger source")
gen.add("trigger_source", int_t, 0,
        "Specifies the trigger source",
        -1, -1, 7, edit_method=trigger_source_enum)
trigger_polarity_enum = gen.enum([gen.const("ts_low", int_t, 0, "low"),
                                  gen.const("ts_high", int_t, 1, "high")],
                                 "Trigger polarity")
gen.add("trigger_polarity", int_t, 0,
        "Trigger polarity",
        0, 0, 1, edit_method=trigger_polarity_enum)
# trigger modes
trigger_mode_enum = gen.enum([gen.const("mode_0", int_t, 0, "standard ext (0)"),
                              gen.const("mode_1", int_t, 1, "bulb shutter (1)"),
                              gen.const("mode_3", int_t, 3, "skip frams (3)"),
                              gen.const("mode_4", int_t, 4, "multi preset (4)"),
                              gen.const("mode_5", int_t, 5, "multi pwidth (5)"),
							  gen.const("mode_13", int_t, 13, "low smear (13)"),
							  gen.const("mode_14", int_t, 14, "overlapped (14)"),
							  gen.const("mode_15", int_t, 15, "multi-shot (15)")],
                             "An enum to set trigger modes")
gen.add("trigger_mode", int_t, 0,
        "Specifies the trigger mode",
        0, 0, 15, edit_method=trigger_mode_enum)

# Strobe control for now it's gpio 2
strobe_control_enum = gen.enum([gen.const("sc_off", int_t, -1, "off"),
                                gen.const("sc_gpio_1", int_t, 1, "GPIO1"),
                                gen.const("sc_gpio_2", int_t, 2, "GPIO2"),
                                gen.const("sc_gpio_3", int_t, 3, "GPIO3")],
                               "Define valid strobe control")
gen.add("strobe_control", int_t, 0,
        "Specifies the stroble control",
        -1, -1, 3, edit_method=strobe_control_enum)
strobe_polarity_enum = gen.enum([gen.const("sc_low", int_t, 0, "low"),
                                 gen.const("sc_high", int_t, 1, "high")],
                                 "Strobe polarity")
gen.add("strobe_polarity", int_t, 0,
        "Strobe polarity",
        0, 0, 1, edit_method=strobe_polarity_enum)

# Exposure
# 1. Off: Control of the exposure is achieved via setting both Exposure and
#         Gain. This mode is achieved by setting Auto Exposure to Off, or by
#         setting Exposure and Gain to Off.
# 2. Manual: The camera automatically modifies Exposure and Gain to try to match
#            the average image intensity to the Auto Exposure value. This mode
#            is achieved by setting Auto Exposure to Off and either/both of
#            Exposure and Gain to Continuous
# 3. Auto: The camera automatically modifies the value in order to produce an
#          image that is visually pleasing. This mode is achieved by setting
#          the all three of Auto Exposure, Exposure, and Gain to Continuous.
#          In this mode, the value reflects the average image intensity
gen.add("exposure", bool_t, 0,
        "Enable/disable exposure",
        True)
gen.add("auto_exposure", bool_t, 0,
        "Automatically change exposure (Gain, IRis & Shutter control)",
        True)
gen.add("exposure_value", double_t, 0,
        "Auto exposure value",
        0.0, -10.0, 10.0)

gen.add("auto_shutter", bool_t, 0,
        "Auomatically change shutter speed",
        True)
gen.add("shutter_ms", double_t, 0,
        "Amount of time (in milliseconds) for the apeture to remain open",
        0.0, 0.0, 100)

gen.add("auto_gain", bool_t, 0,
        "Automatically change gain",
        True)
gen.add("gain_db", double_t, 0,
        "Relative circuit gain",
        0.0, 0.0, 30.0)

# White Balance
# When white balance is off,
# it is effectively the same as setting both red and blue to 512
gen.add("white_balance", bool_t, 0,
        "Enable/disable white balance",
        False)
gen.add("auto_white_balance", bool_t, 0,
        "Automatically change white balance",
        True)
gen.add("wb_blue", int_t, 0,
        "White balance blue component",
        800, 0, 1023)
gen.add("wb_red", int_t, 0,
        "White balance red component",
        550, 0, 1023)

gen.add("brightness", double_t, 0,
        "Black level offset",
        0.0, 0.0, 10.0)

gen.add("gamma", double_t, 0,
        "Gamma expansion exponent",
        1.0, 0.5, 4.0)

exit(gen.generate(PACKAGE, "flea3", "Flea3Dyn"))
