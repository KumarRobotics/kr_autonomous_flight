#!/usr/bin/env python

PACKAGE = "action_planner"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("degree",    int_t,    0, "Polynomial Degree", 7,  5, 15)
gen.add("order",    int_t,    0, "Minization Order", 3,  1, 7)
gen.add("samples",    int_t,    0, "Constraint Samples", 10,  5, 100)
gen.add("max_v", double_t, 0, "Maximum Velocity",    10, 1,   30)
gen.add("max_a", double_t, 0, "Maximum Accerleration",    5, 2,   20)
gen.add("max_j", double_t, 0, "Maximum Jerk",    25, 10,   200)
gen.add("max_w", double_t, 0, "Maximum Angular Velocity",    1.0, 0.1,   10)


poly_enum = gen.enum([ gen.const("Standard",      int_t, 0, "1, t, ..."),
                       gen.const("Legendre",     int_t, 1, "see wikipedia"),
                       gen.const("Bezier",      int_t, 2, "see wikipedia"),
                       gen.const("Chebyshev", int_t, 3, "Better than Chebychase basis"),
                       gen.const("Endpoint", int_t, 4, "Boundary condition basis")],
                     "Basis Types")

gen.add("polytype", int_t, 0, "Choose a basis", 1, 0, 4, edit_method=poly_enum)

con_enum = gen.enum([  gen.const("Control",      int_t, 0, "Control Points"),
                       gen.const("Sample",     int_t, 1, "see the minimum snap paper"),
                       gen.const("Cheby",      int_t, 2, "like sample, but with Chebyshevs intervals")],
                     "Constraint Types")

gen.add("contype", int_t, 0, "Choose a basis", 0, 0, 2, edit_method=con_enum)

gen.add("lx", double_t, 0, "Min X",    -500, -1000,   1000)
gen.add("ly", double_t, 0, "Min Y",    -500, -1000,   1000)
gen.add("lz", double_t, 0, "Min Z",     0, -1000,   1000)
gen.add("ux", double_t, 0, "Max X",    1000, -1000,   2000)
gen.add("uy", double_t, 0, "Max Y",    500, -1000,   1000)
gen.add("uz", double_t, 0, "Max Z",     5, -1000,   1000)



exit(gen.generate(PACKAGE, "action_planner", "ActionPlanner"))
